install.packages("shinipsum")
#' The application User-Interface
#'
#' @param request Internal parameter for `{shiny}`.
#'     DO NOT REMOVE.
#' @import shiny
#' @noRd
app_ui <- function(request) {
tagList(
# Leave this function for adding external resources
golem_add_external_resources(),
# Your application UI logic
fluidPage(
h2("A Random DT"),
DTOutput("data_table"),
h2("A Random Plot"),
plotOutput("plot"),
h2("A Random Text"),
tableOutput("text")
)
)
}
add_resource_path(
"www",
app_sys("app/www")
)
#'     app_sys("app/www")
#'   )
#'
#'   tags$head(
#'     favicon(),
#'     bundle_resources(
#'       path = app_sys("app/www"),
#'       app_title = "SP500App"
#'     )
#'     # Add he
library(DT)
app_ui <- function(request) {
tagList(
# Leave this function for adding external resources
golem_add_external_resources(),
# Your application UI logic
fluidPage(
h2("A Random DT"),
DTOutput("data_table"),
h2("A Random Plot"),
plotOutput("plot"),
h2("A Random Text"),
tableOutput("text")
)
)
}
install.packages("DT")
library(shiny); runApp('R/app_server.R')
runApp('R/app_server.R')
runApp('R/app_server.R')
runApp('R/app_server.R')
runApp('R/app_server.R')
runApp('R/app_server.R')
?golem::add_external_resources
??golem::add_external_resources
runApp('R/app_server.R')
??golem_add_external_resources
??golem_add_external_resources
runApp('R/app_server.R')
runApp('R/app_server.R')
runApp('R/app_server.R')
#' Run the Shiny Application
#'
#' @param ... arguments to pass to golem_opts.
#' See `?golem::get_golem_options` for more details.
#' @inheritParams shiny::shinyApp
#'
#' @export
#' @importFrom shiny shinyApp
#' @importFrom golem with_golem_options
run_app <- function(
onStart = NULL,
options = list(),
enableBookmarking = NULL,
uiPattern = "/",
...
) {
with_golem_options(
app = shinyApp(
ui = app_ui,
server = app_server,
onStart = onStart,
options = options,
enableBookmarking = enableBookmarking,
uiPattern = uiPattern
),
golem_opts = list(...)
)
}
devtools::document()
golem::run_dev()
rm(list = c("run_app"))
rm(list = c("run_app"))
golem::run_dev()
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
library(shiny); runApp('R/app_server.R')
golem::run_dev()
golem::run_dev()
devtools::check()
devtools::check()
devtools::check()
golem::run_dev()
golem::run_dev()
devtools::check()
devtools::check()
golem::run_dev()
devtools::check()
golem::run_dev()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
golem::run_dev()
devtools::check()
??golem::install_dev_deps()
devtools::check()
golem::run_dev()
devtools::check()
devtools::check()
golem::run_dev()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
attachment::att_from_rscripts()
devtools::check()
devtools::check()
attachment::att_from_rscripts()
devtools::check()
golem::run_dev()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
golem::run_dev()
install.packages("shiny")
devtools::check()
devtools::check()
install.packages("shiny")\
golem::run_dev()
devtools::check()
devtools::check()
devtools::check()
golem::run_dev()
devtools::check()
golem::install_dev_deps()
golem::install_dev_deps()
devtools::check()
install.packages(shinipsum)
install.packages("shinipsum")
install.packages("shinipsum")
devtools::check()
golem::fill_desc(
pkg_name = "SP500App", # The Name of the package containing the App
pkg_title = "SP500 Weights", # The Title of the package containing the App
pkg_description = "SP500 Weight Analysis", # The Description of the package containing the App
author_first_name = "Jamie", # Your First Name
author_last_name = "Kim", # Your Last Name
author_email = "jamiek101699@gmail.com", # Your Email
repo_url = "https://github.com/jamiekim1/GolemSP500App.git", # The URL of the GitHub Repo (optional),
pkg_version = "0.0.0.9000" # The Version of the package containing the App
)
golem::set_golem_options()
golem::install_dev_deps()
golem::install_dev_deps()
usethis::use_mit_license("Golem User")
usethis::use_readme_rmd(open = FALSE)
devtools::build_readme()
usethis::use_code_of_conduct(contact = "Golem User")
usethis::use_lifecycle_badge("Experimental")
usethis::use_news_md(open = FALSE)
usethis::use_github()
golem::use_recommended_tests()
golem::use_favicon()
golem::use_utils_ui(with_test = TRUE)
golem::use_utils_server(with_test = TRUE)
rstudioapi::navigateToFile("dev/02_dev.R")
attachment::att_amend_desc()
attachment::att_amend_desc()
attachment::att_from_rscripts('shiny', 'shinipsum', 'DT', 'readxl')
attachment::att_amend_desc()
attachment::att_from_rscripts()
## Add modules ----
## Create a module infrastructure in R/
golem::add_module(name = "name_of_module1", with_test = TRUE) # Name of the module
golem::add_module(name = "name_of_module2", with_test = TRUE) # Name of the module
## Add helper functions ----
## Creates fct_* and utils_*
golem::add_fct("helpers", with_test = TRUE)
golem::add_utils("helpers", with_test = TRUE)
## External resources
## Creates .js and .css files at inst/app/www
golem::add_js_file("script")
golem::add_js_handler("handlers")
golem::add_css_file("custom")
golem::add_sass_file("custom")
## Add internal datasets ----
## If you have data in your package
usethis::use_data_raw(name = "my_dataset", open = FALSE)
## Tests ----
## Add one line by test you want to create
usethis::use_test("app")
# Documentation
## Vignette ----
usethis::use_vignette("SP500App")
devtools::build_vignettes()
## Code Coverage----
## Set the code coverage service ("codecov" or "coveralls")
usethis::use_coverage()
devtools::check()
rhub::check_for_cran()
jamiek101699@gmail.com
golem::run_dev()
golem::run_dev()
random_ggplot()
golem::run_dev()
random_DT(5, 5)
devtools::check()
golem::run_dev()
devtools::check()
devtools::check()
version()
Version()
version
version
